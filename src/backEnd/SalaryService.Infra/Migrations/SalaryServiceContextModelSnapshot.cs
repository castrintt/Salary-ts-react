// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalaryService.Infra.ORM.Context;

#nullable disable

namespace SalaryService.Infra.Migrations
{
    [DbContext(typeof(SalaryServiceContext))]
    partial class SalaryServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SalaryService.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.BankStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<decimal>("StatementBalance")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("statement_balance");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("BankStatement", (string)null);
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Earnings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankStatementId")
                        .HasColumnType("int")
                        .HasColumnName("BankStatement_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("receipt_date");

                    b.Property<int>("TypeOfIncomeSource")
                        .HasColumnType("int")
                        .HasColumnName("type_of_income_source");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("Earnings", (string)null);
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Expenditure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankStatementId")
                        .HasColumnType("int")
                        .HasColumnName("BankStatement_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<int>("TypeOfExpense")
                        .HasColumnType("int")
                        .HasColumnName("type_of_expense");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("Expenditure", (string)null);
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Account", b =>
                {
                    b.HasOne("SalaryService.Domain.Entities.Client", null)
                        .WithOne("Account")
                        .HasForeignKey("SalaryService.Domain.Entities.Account", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.BankStatement", b =>
                {
                    b.HasOne("SalaryService.Domain.Entities.Client", "Client")
                        .WithOne("BankStatement")
                        .HasForeignKey("SalaryService.Domain.Entities.BankStatement", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Earnings", b =>
                {
                    b.HasOne("SalaryService.Domain.Entities.BankStatement", null)
                        .WithMany("Earnings")
                        .HasForeignKey("BankStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Expenditure", b =>
                {
                    b.HasOne("SalaryService.Domain.Entities.BankStatement", null)
                        .WithMany("Expenditures")
                        .HasForeignKey("BankStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.BankStatement", b =>
                {
                    b.Navigation("Earnings");

                    b.Navigation("Expenditures");
                });

            modelBuilder.Entity("SalaryService.Domain.Entities.Client", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("BankStatement")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
